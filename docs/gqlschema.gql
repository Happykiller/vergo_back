# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthAuthResolverDto {
  """User code for the session"""
  login: String!

  """Password for the session"""
  password: String!
}

type AuthModelResolver {
  """Session token"""
  access_token: String!

  """Code of the user"""
  code: String!
  description: String!

  """Id of the user"""
  id: String!
  mail: String!
  name_first: String!
  name_last: String!
  role: String!
}

input CreatePasskeyRegistrationCredentialResolverDto {
  algorithm: String!
  id: String!
  publicKey: String!
}

input CreatePasskeyRegistrationResolverDto {
  attestationData: String!
  authenticatorData: String!
  clientData: String!
  credential: CreatePasskeyRegistrationCredentialResolverDto!
  username: String!
}

input CreatePasskeyResolverDto {
  challenge: String!
  hostname: String!
  label: String!
  registration: CreatePasskeyRegistrationResolverDto!
}

input CreateTrainingDtoResolver {
  gender: String
  is_private: Boolean
  label: String
  slug: String!
  workout: [CreateTrainingWorkoutDtoResolver!]!
}

input CreateTrainingWorkoutDtoResolver {
  sets: [CreateTrainingWorkoutSetDtoResolver!]!
  slug: String!
}

input CreateTrainingWorkoutSetDtoResolver {
  duration: Float
  ite: Float
  pause: Float
  rep: Float
  rest: Float
  sets: [CreateTrainingWorkoutSetDtoResolver!]
  slugs: [String!]
  weight: Float
}

input CreateUserResolverDto {
  """Code of the user"""
  code: String!
  description: String!
  mail: String!
  name_first: String!
  name_last: String!
  password: String!
}

input DeletePasskeyResolverDto {
  passkey_id: String!
}

type ExerciceModelResolver {
  description: [LanguageModelResolver!]!
  id: String!
  image: String
  slug: String!
  title: [LanguageModelResolver!]!
}

input GetExerciceResolverDto {
  id: String!
}

input GetTrainingResolverDto {
  id: String!
}

input GetUserResolverDto {
  code: String
  id: String
}

type LanguageModelResolver {
  lang: String!
  value: String!
}

type Mutation {
  create_passkey(dto: CreatePasskeyResolverDto!): PasskeyResolverModel!
  create_user(dto: CreateUserResolverDto!): UserModelResolver!
  delete_passkey(dto: DeletePasskeyResolverDto!): Boolean!
  training_create(dto: CreateTrainingDtoResolver!): TrainingModelResolver!
  training_update(dto: UpdateTrainingDtoResolver!): Boolean!
  update_password(dto: UpdPasswordAuthResolverDto!): AuthModelResolver!
}

input OrderResolverDto {
  field: String!
  order: SortOrder!
}

type PaginatedTrainingsResolverModel {
  nodes: [TrainingModelResolver!]
  totalCount: Int!
}

input PasskeyAuthResolverDto {
  authenticatorData: String!
  clientData: String!
  credentialId: String!
  signature: String!
  userHandle: String!
  user_code: String!
}

type PasskeyResolverModel {
  challenge: String!
  credential_id: String!
  hostname: String!
  id: String!
  label: String!
  user_code: String!
  user_id: String!
}

type Query {
  auth(dto: AuthAuthResolverDto!): AuthModelResolver!
  auth_passkey(dto: PasskeyAuthResolverDto!): AuthModelResolver!
  exercice(dto: GetExerciceResolverDto!): ExerciceModelResolver!
  exercices(dto: GetTrainingResolverDto): [ExerciceModelResolver!]!
  getSessionInfo: AuthModelResolver!
  get_private_trainings: [TrainingModelResolver!]!
  passkeys_for_user: [PasskeyResolverModel!]!
  searchWorkoutsPaginated(dto: SearchWorkoutsResolverDto!, limit: Int, offset: Int, order_by: OrderResolverDto): SearchWorkoutsPaginatedResolverModel!
  systemInfo: SystemInfoResolverModel!
  training(dto: GetTrainingResolverDto!): TrainingModelResolver!
  training_normalized(dto: GetTrainingResolverDto!): [TrainingNormalizedResolverModel!]!
  trainings: [TrainingModelResolver!]!
  trainingsPaginated(limit: Int, offset: Int, orderBy: OrderResolverDto): PaginatedTrainingsResolverModel!
  user(dto: GetUserResolverDto!): UserModelResolver!
  users: [UserModelResolver!]!
  workouts(limit: Int, offset: Int, order_by: OrderResolverDto): WorkoutsPaginatedResolverModel!
}

type SearchWorkoutsPaginatedNodeResolverModel {
  found: WorkoutDefModelResolver
  search: String!
}

type SearchWorkoutsPaginatedResolverModel {
  count: Float!
  nodes: [SearchWorkoutsPaginatedNodeResolverModel!]!
}

input SearchWorkoutsResolverDto {
  workouts_slug: [String!]!
}

input SetDtoResolver {
  duration: Float
  ite: Float
  pause: Float
  rep: Float
  rest: Float
  sets: [SetDtoResolver!]
  slugs: [String!]
  weight: Float
}

type SetModelResolver {
  duration: Float
  ite: Float
  pause: Float
  rep: Float
  rest: Float
  sets: [SetModelResolver!]
  slugs: [String!]
  weight: Float
}

enum SortOrder {
  ASC
  DESC
}

type SystemInfoResolverModel {
  version: String!
}

type TrainingModelResolver {
  contributors: [UserModelResolver!]
  contributors_id: [String!]
  creator: UserModelResolver
  creator_id: String
  gender: String
  id: String!
  label: String
  slug: String!
  workout: [WorkoutModelResolver!]!
}

type TrainingNormalizedResolverModel {
  duration: Float!
  ite: Float
  slugs: [String!]!
  type: String!
  weight: Float
}

input UpdPasswordAuthResolverDto {
  conf_value: String!
  new_value: String!
  old_value: String!
}

input UpdateTrainingDtoResolver {
  gender: String
  id: String
  label: String
  slug: String
  workout: [WorkoutDtoResolver!]
}

type UserModelResolver {
  code: String
  description: String
  id: String
  mail: String
  name_first: String
  name_last: String
  role: String
}

type WorkoutDefModelResolver {
  description: [LanguageModelResolver!]!
  id: String!
  image: String
  slug: String!
  title: [LanguageModelResolver!]!
}

input WorkoutDtoResolver {
  sets: [SetDtoResolver!]!
  slug: String!
}

type WorkoutModelResolver {
  sets: [SetModelResolver!]!
  slug: String!
}

type WorkoutsPaginatedResolverModel {
  count: Float!
  nodes: [WorkoutDefModelResolver!]!
}